apiVersion: v1
kind: ServiceAccount
metadata:
  name: harbor
  namespace: harbor
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: harbor
roleRef:
  kind: ClusterRole
  name: system:auth-delegator
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: harbor
    namespace: harbor
---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: harbor
  namespace: harbor
spec:
  provider:
    vault:
      server: "http://vault.vault.svc.cluster.local:8200"
      path: "app"
      version: "v2"
      auth:
        kubernetes:
          # Path where the Kubernetes authentication backend is mounted in Vault
          mountPath: "kubernetes"
          # A required field containing the Vault Role to assume.
          role: "harbor"
          # Optional service account field containing the name
          # of a kubernetes ServiceAccount
          serviceAccountRef:
            name: "harbor"
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: harbor
  namespace: harbor
spec:
  refreshInterval: "15s" # time to sync from vault
  secretStoreRef:
    name: harbor
    kind: SecretStore
  target:
    name: harbor
    creationPolicy: Owner # create secret if not exists
  data:
    - secretKey: HARBOR_ADMIN_PASSWORD
      remoteRef:
        key: app/data/harbor # path to secret in vault
        property: HARBOR_ADMIN_PASSWORD # key in the vault secret
    - secretKey: secretKey
      remoteRef:
        key: app/data/harbor
        property: secretKey
    - secretKey: REGISTRY_PASSWD
      remoteRef:
        key: app/data/harbor
        property: REGISTRY_PASSWD
    - secretKey: REGISTRY_HTPASSWD
      remoteRef:
        key: app/data/harbor
        property: REGISTRY_HTPASSWD
    - secretKey: CONFIG_OVERWRITE_JSON
      remoteRef:
        key: app/data/harbor
        property: CONFIG_OVERWRITE_JSON
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: harbor-database
  namespace: harbor
spec:
  refreshInterval: "15s" # time to sync from vault
  secretStoreRef:
    name: harbor
    kind: SecretStore
  target:
    name: harbor-database
    creationPolicy: Owner # create secret if not exists
    annotations:
      argocd.argoproj.io/sync-options: Skip
  data:
    - secretKey: POSTGRES_PASSWORD
      remoteRef:
        key: app/data/harbor
        property: POSTGRES_PASSWORD
    - secretKey: password
      remoteRef:
        key: app/data/harbor
        property: POSTGRES_PASSWORD
---
